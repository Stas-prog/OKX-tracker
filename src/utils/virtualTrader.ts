// –ü–æ—Å—Ç—ñ–π–Ω–∏–π (Mongo) –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä: —Å—Ç–∞–Ω –ø–æ –∫–æ–∂–Ω–æ–º—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É + —ñ—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥.
import { getDb } from "@/lib/mongo";
import { strategies } from "./strategies";
import { sendTelegramMessage } from "./sendTelegramMessage";

// ---- –¢–∏–ø–∏ –∑ —Ä—è–¥–∫–æ–≤–∏–º–∏ _id (–±–µ–∑ ObjectId) ----
type VTStateDoc = {
    _id: string;                 // instId, –Ω–∞–ø—Ä. "BTC-USDT"
    position: "none" | "long";
    entryPrice: number | null;
    pnl: number;                 // –Ω–∞–∫–æ–ø–∏—á–µ–Ω–∏–π PnL —É $ (—Å–ø—Ä–æ—â–µ–Ω–æ)
    updatedAt: string;
};

type VTTradeDoc = {
    _id: string;                 // –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π: <instId>|<type>|<ts>
    instId: string;
    time: string;                // ISO
    type: "buy" | "sell";
    price: number;
    pnl?: number;                // PnL –Ω–∞ —É–≥–æ–¥—ñ (–¥–ª—è sell)
    createdAt: string;           // ISO (–¥–ª—è —ñ–Ω–¥–µ–∫—Å–∞/—Å–æ—Ä—Ç—É)
};

// –õ–µ–≥–∫–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è —Ü—ñ–Ω–∏ OKX
async function fetchOkxLast(instId: string): Promise<number> {
    const r = await fetch(`https://www.okx.com/api/v5/market/ticker?instId=${instId}`, { cache: "no-store" });
    const j = await r.json();
    return parseFloat(j?.data?.[0]?.last ?? "0");
}

// –Ü–Ω–¥–µ–∫—Å–∏ (–≤–∏–∫–æ–Ω–∞—é—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø—Ä–æ—Ü–µ—Å; –±–µ–∑–ø–µ—á–Ω–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–æ)
let indexesEnsured = false;
async function ensureIndexes() {
    if (indexesEnsured) return;
    const db = await getDb();
    await Promise.all([
        db.collection<VTStateDoc>("vt_state").createIndex({ _id: 1 }, { name: "_id_asc", unique: true }),
        db.collection<VTTradeDoc>("vt_trades").createIndex({ createdAt: -1 }, { name: "createdAt_desc" }),
        db.collection<VTTradeDoc>("vt_trades").createIndex({ instId: 1, createdAt: -1 }, { name: "instId_createdAt" }),
    ]).catch(() => { });
    indexesEnsured = true;
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≤ Mongo
async function loadState(instId: string): Promise<VTStateDoc> {
    await ensureIndexes();
    const db = await getDb();
    const col = db.collection<VTStateDoc>("vt_state");
    const doc =
        (await col.findOne({ _id: instId })) ??
        ({
            _id: instId,
            position: "none",
            entryPrice: null,
            pnl: 0,
            updatedAt: new Date().toISOString(),
        } as VTStateDoc);
    return doc;
}

async function saveState(state: VTStateDoc) {
    const db = await getDb();
    await db.collection<VTStateDoc>("vt_state").updateOne(
        { _id: state._id },
        { $set: { ...state, updatedAt: new Date().toISOString() } },
        { upsert: true }
    );
}

async function appendTrade(t: Omit<VTTradeDoc, "_id" | "createdAt">) {
    const db = await getDb();
    const id = `${t.instId}|${t.type}|${Date.parse(t.time)}`;
    const doc: VTTradeDoc = {
        _id: id,
        ...t,
        createdAt: new Date().toISOString(),
    };
    await db.collection<VTTradeDoc>("vt_trades").updateOne({ _id: id }, { $set: doc }, { upsert: true });
}

// –ü—É–±–ª—ñ—á–Ω–µ API: —ñ—Å—Ç–æ—Ä—ñ—è (–æ—Å—Ç–∞–Ω–Ω—ñ N), –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –ø–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
export async function getTradeHistory(limit = 100, instId?: string): Promise<VTTradeDoc[]> {
    await ensureIndexes();
    const db = await getDb();
    const col = db.collection<VTTradeDoc>("vt_trades");
    const filter = instId ? { instId } : {};
    return col.find(filter).sort({ createdAt: -1 }).limit(Math.min(limit, 2000)).toArray();
}

// –ü—É–±–ª—ñ—á–Ω–µ API: –∑–≤–æ–¥–Ω–∏–π —Å—Ç–∞–Ω –ø–æ –≤—Å—ñ—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è—Ö (–¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ)
export async function getAllStates(): Promise<VTStateDoc[]> {
    await ensureIndexes();
    const db = await getDb();
    return db.collection<VTStateDoc>("vt_state").find({}).toArray();
}

// –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø: –ø—Ä–æ–π—Ç–∏ –≤—Å—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó, –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω/—É–≥–æ–¥–∏ (–≤ Mongo), –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∑–≤–µ–¥–µ–Ω–Ω—è
export async function checkAllStrategies() {
    await ensureIndexes();

    const results: Array<{
        instId: string;
        currentPrice: number;
        position: "none" | "long";
        entryPrice: number | null;
        pnl: number;
        buyBelow: number;
        sellAbove: number;
    }> = [];

    for (const strat of strategies) {
        const instId = strat.instId;
        const s = await loadState(instId);
        const currentPrice = await fetchOkxLast(instId);

        // BUY-—Å–∏–≥–Ω–∞–ª
        if (s.position === "none" && currentPrice > 0 && currentPrice < strat.buyBelow) {
            s.position = "long";
            s.entryPrice = currentPrice;
            await appendTrade({
                instId,
                time: new Date().toISOString(),
                type: "buy",
                price: currentPrice,
            });
            await saveState(s);
            // –ù–µ—Ö–∞–π Telegram –∂–∏–≤–µ, –∞–ª–µ –Ω–µ –±–ª–æ–∫—É—î –∑–∞–ø–∏—Ç
            sendTelegramMessage(`üöÄ –ö—É–ø—ñ–≤–ª—è ${instId} –ø–æ ${currentPrice.toFixed(2)}`);
        }

        // SELL-—Å–∏–≥–Ω–∞–ª
        else if (s.position === "long" && s.entryPrice != null && currentPrice > strat.sellAbove) {
            const entry = s.entryPrice;
            const pnl = currentPrice - entry;
            s.pnl += pnl;
            s.position = "none";
            s.entryPrice = null;

            await appendTrade({
                instId,
                time: new Date().toISOString(),
                type: "sell",
                price: currentPrice,
                pnl,
            });
            await saveState(s);
            sendTelegramMessage(`üí∞ –ü—Ä–æ–¥–∞–∂ ${instId} –ø–æ ${currentPrice.toFixed(2)} | PnL: ${pnl.toFixed(2)}$`);
        }

        results.push({
            instId,
            currentPrice,
            position: s.position,
            entryPrice: s.entryPrice,
            pnl: s.pnl,
            buyBelow: strat.buyBelow,
            sellAbove: strat.sellAbove,
        });
    }

    return results;
}
